{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useCallback, useEffect } from 'react';\n// カスタムフック　useTasksの定義\nexport const useTasks = () => {\n  _s();\n  // APIのベースURL\n  const API_URL = 'http://127.0.0.1:8000';\n\n  // taskの状態管理\n  const [tasks, setTasks] = React.useState([]);\n  const [error, setError] = React.useState(null);\n\n  // ---タスク一覧の取得--- //\n  // 何かが変わったときに実行される\n  useEffect(() => {\n    const fetchTasks = async () => {\n      // ここでAPIからtasksを取得する処理を実装\n      try {\n        setError(null);\n        const response = await fetch(`${API_URL}/tasks`);\n        const data = await response.json();\n        setTasks(data);\n      } catch (err) {\n        console.error('タスクの取得に失敗しました:', error);\n      }\n    };\n    fetchTasks();\n  }, []);\n\n  // 以下不要なレンダリング対策のためuseCallbackを使用\n\n  // ---タスクの追加--- //\n  const onCreateTask = useCallback(async title => {\n    try {\n      setError(null);\n      const response = await fetch(`${API_URL}/tasks`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          title\n        })\n      });\n      const newTask = await response.json();\n      setTasks(prevTasks => [...prevTasks, newTask]);\n      return true;\n    } catch (err) {\n      console.error('タスクの追加に失敗しました:', error);\n      return false;\n    }\n  }, []);\n\n  // ---タスクの完了状態切り替え--- //\n  const onToggleTaskCompleted = useCallback(async task => {\n    try {\n      setError(null);\n      const response = await fetch(`${API_URL}/tasks/${task.id}`, {\n        method: 'PATCH'\n      });\n      const updatedTask = await response.json();\n      setTasks(prevTasks => prevTasks.map(t => t.id === updatedTask.id ? updatedTask : t));\n      return true;\n    } catch (err) {\n      console.error('タスクの更新に失敗しました:', error);\n      return false;\n    }\n  }, []);\n\n  // ---タスクの削除--- //\n  const deleteTask = useCallback(async taskId => {\n    // 削除確認ダイアログ\n    if (!window.confirm('本当にこのタスクを削除しますか？')) {\n      return false;\n    }\n    try {\n      setError(null);\n      await fetch(`${API_URL}/tasks/${taskId}`, {\n        method: 'DELETE'\n      });\n      setTasks(prevTasks => prevTasks.filter(t => t.id !== taskId));\n      return true;\n    } catch (err) {\n      console.error('タスクの削除に失敗しました:', error);\n      return false;\n    }\n  }, []);\n  return {\n    tasks,\n    onCreateTask,\n    onToggleTaskCompleted,\n    deleteTask,\n    error\n  };\n};\n_s(useTasks, \"ku9tnTHKXgBf49xrxe8Or/vgPk4=\");","map":{"version":3,"names":["React","useCallback","useEffect","useTasks","_s","API_URL","tasks","setTasks","useState","error","setError","fetchTasks","response","fetch","data","json","err","console","onCreateTask","title","method","headers","body","JSON","stringify","newTask","prevTasks","onToggleTaskCompleted","task","id","updatedTask","map","t","deleteTask","taskId","window","confirm","filter"],"sources":["/Users/ayato/task-management-app/frontend/src/hooks/useTasks.tsx"],"sourcesContent":["import React, { useCallback, useEffect } from 'react';\nimport { Task } from '../App';\n\n// カスタムフック　useTasksの定義\nexport const useTasks = () => {\n\n    // APIのベースURL\n    const API_URL = 'http://127.0.0.1:8000';\n\n    // taskの状態管理\n    const [tasks, setTasks] = React.useState<Task[]>([]);\n    const [error, setError] = React.useState<string | null>(null);\n\n    // ---タスク一覧の取得--- //\n    // 何かが変わったときに実行される\n    useEffect(() => {\n        const fetchTasks = async () => {\n            // ここでAPIからtasksを取得する処理を実装\n            try {\n                setError(null);\n                const response = await fetch(`${API_URL}/tasks`);\n                const data = await response.json();\n                setTasks(data);\n            } catch (err: any) {\n                console.error('タスクの取得に失敗しました:', error);\n            }\n        }\n        fetchTasks();\n    },[]);\n\n    // 以下不要なレンダリング対策のためuseCallbackを使用\n\n    // ---タスクの追加--- //\n    const onCreateTask = useCallback(async (title: string): Promise<boolean> => {\n        try {\n            setError(null);\n            const response = await fetch(`${API_URL}/tasks`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ title }),\n            });\n            const newTask: Task = await response.json();\n            setTasks((prevTasks) => [...prevTasks, newTask]);\n            return true;\n        } catch (err: any) {\n            console.error('タスクの追加に失敗しました:', error);\n            return false;\n        }\n    }, []);\n\n    // ---タスクの完了状態切り替え--- //\n    const onToggleTaskCompleted = useCallback(async (task: Task): Promise<boolean> => {\n        try {\n            setError(null);\n            const response = await fetch(`${API_URL}/tasks/${task.id}`, {\n                method: 'PATCH',\n            });\n            const updatedTask: Task = await response.json();\n            setTasks((prevTasks) =>\n                prevTasks.map((t) => (t.id === updatedTask.id ? updatedTask : t))\n            );\n            return true;\n        } catch (err: any) {\n            console.error('タスクの更新に失敗しました:', error);\n            return false;\n        }\n    }, [])\n    \n    // ---タスクの削除--- //\n    const deleteTask = useCallback(async (taskId: number): Promise<boolean> => {\n        // 削除確認ダイアログ\n        if (!window.confirm('本当にこのタスクを削除しますか？')) {\n            return false;\n        }\n        try {\n            setError(null);\n            await fetch(`${API_URL}/tasks/${taskId}`, {\n                method: 'DELETE',\n            });\n            setTasks((prevTasks) => prevTasks.filter((t) => t.id !== taskId));\n            return true;\n        } catch (err: any) {\n            console.error('タスクの削除に失敗しました:', error);\n            return false;\n        }   \n    }, []);\n\n    return {\n        tasks,\n        onCreateTask,\n        onToggleTaskCompleted,\n        deleteTask,\n        error,\n    };\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}